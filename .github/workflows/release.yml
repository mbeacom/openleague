name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0, or leave empty for auto)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write
  discussions: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run type check
        run: bun run type-check

      - name: Run linter
        run: bun run lint

      - name: Run build
        run: bun run build

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Get the latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            echo "Latest tag: ${LATEST_TAG:-none}"

            if [ -z "$LATEST_TAG" ]; then
              # No tags exist, start from 0.0.0 and check all commits
              MAJOR=0
              MINOR=0
              PATCH=0
              COMMITS=$(git log --pretty=format:"%s")
            else
              # Remove 'v' prefix if present
              LATEST_VERSION=${LATEST_TAG#v}

              # Parse version components
              IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"

              # Check commit messages for version bump type
              COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
            fi

            if echo "$COMMITS" | grep -qiE "^(feat|feature)(\(.+\))?!:|^BREAKING CHANGE:|breaking change"; then
              # Major version bump for breaking changes
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif echo "$COMMITS" | grep -qiE "^(feat|feature)(\(.+\))?:"; then
              # Minor version bump for new features
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              # Patch version bump for fixes and other changes
              PATCH=$((PATCH + 1))
            fi

            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json version
        run: |
          VERSION=${{ steps.version.outputs.version }}
          # Update version in package.json
          cat package.json | jq ".version = \"$VERSION\"" > package.json.tmp
          mv package.json.tmp package.json
          echo "Updated package.json to version $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ steps.version.outputs.version }}
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi

          # Categorize commits
          FEATURES=$(echo "$COMMITS" | grep -iE "^- (feat|feature)(\(.+\))?:" || echo "")
          FIXES=$(echo "$COMMITS" | grep -iE "^- (fix|bugfix)(\(.+\))?:" || echo "")
          BREAKING=$(echo "$COMMITS" | grep -iE "^- (feat|feature)(\(.+\))?!:|BREAKING CHANGE" || echo "")
          OTHERS=$(echo "$COMMITS" | grep -viE "^- (feat|feature|fix|bugfix)(\(.+\))?:" || echo "")

          # Build changelog
          CHANGELOG="## What's Changed\n\n"

          if [ -n "$BREAKING" ]; then
            CHANGELOG="${CHANGELOG}### ⚠️ Breaking Changes\n\n${BREAKING}\n\n"
          fi

          if [ -n "$FEATURES" ]; then
            CHANGELOG="${CHANGELOG}### ✨ Features\n\n${FEATURES}\n\n"
          fi

          if [ -n "$FIXES" ]; then
            CHANGELOG="${CHANGELOG}### 🐛 Bug Fixes\n\n${FIXES}\n\n"
          fi

          if [ -n "$OTHERS" ]; then
            CHANGELOG="${CHANGELOG}### 📦 Other Changes\n\n${OTHERS}\n\n"
          fi

          if [ -n "$LATEST_TAG" ]; then
            CHANGELOG="${CHANGELOG}**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v${VERSION}"
          else
            CHANGELOG="${CHANGELOG}**Full Changelog**: https://github.com/${{ github.repository }}/commits/v${VERSION}"
          fi

          # Save to file for multi-line output
          echo "$CHANGELOG" > changelog.txt
          echo "Generated changelog for version $VERSION"

      - name: Commit version bump
        run: |
          VERSION=${{ steps.version.outputs.version }}
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore: bump version to $VERSION [skip ci]" || echo "No changes to commit"
          git push

      - name: Create Git tag
        run: |
          VERSION=${{ steps.version.outputs.version }}
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@62c96d0c4e8a889135c1f3a25910db8dbe0e85f7 # v2.3.4
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: changelog.txt
          draft: false
          prerelease: false
          generate_release_notes: true
          discussion_category_name: 'Announcements'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify success
        if: success()
        run: |
          echo "✅ Release v${{ steps.version.outputs.version }} created successfully!"
          echo "🔗 View release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"
