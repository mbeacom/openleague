name: Version Check

on:
  pull_request:
    branches:
      - main
    paths:
      - 'package.json'

permissions:
  pull-requests: write
  contents: read

jobs:
  check-version:
    name: Verify Version Bump
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Get PR version
        id: pr_version
        run: |
          PR_VERSION=$(cat package.json | grep '"version"' | head -1 | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=${PR_VERSION}" >> $GITHUB_OUTPUT
          echo "PR version: ${PR_VERSION}"

      - name: Get base version
        id: base_version
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }} -- package.json
          BASE_VERSION=$(cat package.json | grep '"version"' | head -1 | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=${BASE_VERSION}" >> $GITHUB_OUTPUT
          echo "Base version: ${BASE_VERSION}"

      - name: Compare versions
        id: compare
        run: |
          PR_VERSION="${{ steps.pr_version.outputs.version }}"
          BASE_VERSION="${{ steps.base_version.outputs.version }}"

          if [ "$PR_VERSION" == "$BASE_VERSION" ]; then
            echo "status=unchanged" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Version unchanged: $PR_VERSION"
          else
            # Parse versions
            IFS='.' read -r PR_MAJOR PR_MINOR PR_PATCH <<< "$PR_VERSION"
            IFS='.' read -r BASE_MAJOR BASE_MINOR BASE_PATCH <<< "$BASE_VERSION"

            # Remove any pre-release suffixes
            PR_PATCH=${PR_PATCH%%-*}
            BASE_PATCH=${BASE_PATCH%%-*}

            if [ "$PR_MAJOR" -gt "$BASE_MAJOR" ]; then
              echo "status=major" >> $GITHUB_OUTPUT
              echo "üî¥ Major version bump: $BASE_VERSION ‚Üí $PR_VERSION"
            elif [ "$PR_MAJOR" -eq "$BASE_MAJOR" ] && [ "$PR_MINOR" -gt "$BASE_MINOR" ]; then
              echo "status=minor" >> $GITHUB_OUTPUT
              echo "üü° Minor version bump: $BASE_VERSION ‚Üí $PR_VERSION"
            elif [ "$PR_MAJOR" -eq "$BASE_MAJOR" ] && [ "$PR_MINOR" -eq "$BASE_MINOR" ] && [ "$PR_PATCH" -gt "$BASE_PATCH" ]; then
              echo "status=patch" >> $GITHUB_OUTPUT
              echo "üü¢ Patch version bump: $BASE_VERSION ‚Üí $PR_VERSION"
            else
              echo "status=invalid" >> $GITHUB_OUTPUT
              echo "‚ùå Invalid version bump: $BASE_VERSION ‚Üí $PR_VERSION"
            fi
          fi

      - name: Comment on PR
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const status = '${{ steps.compare.outputs.status }}';
            const prVersion = '${{ steps.pr_version.outputs.version }}';
            const baseVersion = '${{ steps.base_version.outputs.version }}';

            let emoji, message, color;

            switch(status) {
              case 'unchanged':
                emoji = '‚ö†Ô∏è';
                message = `Version unchanged: \`${prVersion}\`\n\nConsider bumping the version if this PR introduces changes.`;
                color = 'warning';
                break;
              case 'major':
                emoji = 'üî¥';
                message = `Major version bump: \`${baseVersion}\` ‚Üí \`${prVersion}\`\n\nThis indicates breaking changes.`;
                color = 'danger';
                break;
              case 'minor':
                emoji = 'üü°';
                message = `Minor version bump: \`${baseVersion}\` ‚Üí \`${prVersion}\`\n\nThis indicates new features.`;
                color = 'info';
                break;
              case 'patch':
                emoji = 'üü¢';
                message = `Patch version bump: \`${baseVersion}\` ‚Üí \`${prVersion}\`\n\nThis indicates bug fixes or minor changes.`;
                color = 'success';
                break;
              case 'invalid':
                emoji = '‚ùå';
                message = `Invalid version bump: \`${baseVersion}\` ‚Üí \`${prVersion}\`\n\nVersion must follow semantic versioning and increase monotonically.`;
                color = 'danger';
                break;
            }

            const body = `## ${emoji} Version Check\n\n${message}\n\n### Semantic Versioning Guide\n- **Major**: Breaking changes (1.0.0 ‚Üí 2.0.0)\n- **Minor**: New features, backward compatible (1.0.0 ‚Üí 1.1.0)\n- **Patch**: Bug fixes, backward compatible (1.0.0 ‚Üí 1.0.1)`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Fail on invalid version
        if: steps.compare.outputs.status == 'invalid'
        run: |
          echo "‚ùå Invalid version bump detected"
          exit 1
